diff --git a/CMakeLists.txt b/CMakeLists.txt
index 8327fe0..3e217c2 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -140,29 +140,33 @@ if(ENABLE_NETGEN)
     include_directories(${NETGEN_INCLUDE_DIR}/include)
     include_directories(${NETGEN_INCLUDE_DIR}/stlgeom)
 
-    # Set NETGEN_VERSION
-    file(STRINGS ${NETGEN_INCLUDE_DIR}/mydefs.hpp NETGEN_VERSION
-        REGEX "#define PACKAGE_VERSION.*"
-        )
-
-    if(NETGEN_VERSION)
-        string(REGEX MATCHALL "[0-9]+" NETGEN_VERSION ${NETGEN_VERSION})
-        list(LENGTH NETGEN_VERSION NETGEN_VERSION_COUNT)
-        list(GET NETGEN_VERSION 0 NETGEN_VERSION_MAJOR)
-        if(NETGEN_VERSION_COUNT GREATER 1)
-            list(GET NETGEN_VERSION 1 NETGEN_VERSION_MINOR)
+    if(NOT NETGEN_VERSION_MAJOR)
+        # Set NETGEN_VERSION
+        file(STRINGS ${NETGEN_INCLUDE_DIR}/mydefs.hpp NETGEN_VERSION
+            REGEX "#define PACKAGE_VERSION.*"
+            )
+
+        if(NETGEN_VERSION)
+            string(REGEX MATCHALL "[0-9]+" NETGEN_VERSION ${NETGEN_VERSION})
+            list(LENGTH NETGEN_VERSION NETGEN_VERSION_COUNT)
+            list(GET NETGEN_VERSION 0 NETGEN_VERSION_MAJOR)
+            if(NETGEN_VERSION_COUNT GREATER 1)
+                list(GET NETGEN_VERSION 1 NETGEN_VERSION_MINOR)
+            else()
+                set(NETGEN_VERSION_MINOR 0)
+            endif()
         else()
-            set(NETGEN_VERSION_MINOR 0)
+            # Assume version 6.2.
+            message(STATUS "WARNING: Assuming Netgen 6.2.")
+            set(NETGEN_VERSION_MAJOR 6)
+            set(NETGEN_VERSION_MINOR 2)
         endif()
-    else()
-        # Assume version 6.2.
-        message(STATUS "WARNING: Assuming Netgen 6.2.")
-        set(NETGEN_VERSION_MAJOR 6)
-        set(NETGEN_VERSION_MINOR 2)
+        set(NETGEN_VERSION_PATCH 0)
     endif()
 
-    MATH(EXPR NETGEN_VERSION "(${NETGEN_VERSION_MAJOR} << 16) + (${NETGEN_VERSION_MINOR} << 8)")
-    message(STATUS "Using Netgen version ${NETGEN_VERSION_MAJOR}.${NETGEN_VERSION_MINOR}, calculated: ${NETGEN_VERSION}")
+    MATH(EXPR NETGEN_VERSION "(${NETGEN_VERSION_MAJOR} << 16) + (${NETGEN_VERSION_MINOR} << 8) + (${NETGEN_VERSION_PATCH})")
+    MATH(EXPR NETGEN_VERSION_62_2004 "(6 << 16) + (2 << 8) + (2004)")
+    message(STATUS "Using Netgen version ${NETGEN_VERSION_MAJOR}.${NETGEN_VERSION_MINOR}.${NETGEN_VERSION_PATCH}, calculated: ${NETGEN_VERSION}")
 
 endif()
 
@@ -304,15 +308,19 @@ if(ENABLE_NETGEN)
     file(GLOB NETGENPlugin_SRC src/NETGENPlugin/*.cxx)
     add_library(NETGENPlugin ${NETGENPlugin_SRC})
     if (NETGEN_LIBRARY)
-        target_link_libraries(NETGENPlugin StdMeshers TKIGES TKXDEIGES ${NETGEN_LIBRARY})
+        target_link_libraries(NETGENPlugin StdMeshers TKIGES TKXDEIGES TKLCAF ${NETGEN_LIBRARY})
     else (NETGEN_LIBRARY)
-        target_link_libraries(NETGENPlugin StdMeshers nglib)
+        target_link_libraries(NETGENPlugin StdMeshers TKIGES TKXDEIGES TKLCAF nglib)
     endif (NETGEN_LIBRARY)
     if(WIN32)
         set_target_properties(NETGENPlugin PROPERTIES COMPILE_FLAGS "-DNETGENPLUGIN_EXPORTS -DNO_PARALLEL_THREADS -DOCCGEOMETRY -DNETGEN_VERSION=${NETGEN_VERSION}")
     else()
         set_target_properties(NETGENPlugin PROPERTIES COMPILE_FLAGS "${NETGEN_CXX_FLAGS} -DNETGEN_VERSION=${NETGEN_VERSION}")
     endif()
+    if (NOT NETGEN_VERSION LESS NETGEN_VERSION_62_2004) # Version >= 6.2.2004
+        set_target_properties(NETGENPlugin PROPERTIES CXX_STANDARD_REQUIRED ON)
+        set_target_properties(NETGENPlugin PROPERTIES CXX_STANDARD 17) # Standard std=c++1y could work aswell
+    endif()
 endif()
 
 # SMDS
diff --git a/inc/NETGENPlugin_Mesher.hxx b/inc/NETGENPlugin_Mesher.hxx
index 20bb0cd..7594588 100644
--- a/inc/NETGENPlugin_Mesher.hxx
+++ b/inc/NETGENPlugin_Mesher.hxx
@@ -36,7 +36,7 @@
 #include <SMESH_Algo.hxx>
 #include <SMESH_ProxyMesh.hxx>
 
-#define NETGEN_VERSION_STRING(a,b) (a << 16) + (b << 8)
+#define NETGEN_VERSION_STRING(a,b,c) (a << 16) + (b << 8) + (c)
 
 #include <TopTools_IndexedMapOfShape.hxx>
 
@@ -85,7 +85,7 @@ struct NETGENPlugin_ngMeshInfo
 struct NETGENPLUGIN_EXPORT NETGENPlugin_NetgenLibWrapper
 {
   bool             _isComputeOk;
-#if NETGEN_VERSION < NETGEN_VERSION_STRING(6,0)
+#if NETGEN_VERSION < NETGEN_VERSION_STRING(6,0,0)
   nglib::Ng_Mesh * _ngMesh;
 #else
   std::shared_ptr<nglib::Ng_Mesh> _ngMesh;
@@ -207,7 +207,7 @@ class NETGENPLUGIN_EXPORT NETGENPlugin_Mesher
   bool                 _optimize;
   int                  _fineness;
   bool                 _isViscousLayers2D;
-#if NETGEN_VERSION < NETGEN_VERSION_STRING(6,0)
+#if NETGEN_VERSION < NETGEN_VERSION_STRING(6,0,0)
   netgen::Mesh*        _ngMesh;
 #else
   std::shared_ptr<netgen::Mesh> _ngMesh;
diff --git a/src/NETGENPlugin/NETGENPlugin_Mesher.cxx b/src/NETGENPlugin/NETGENPlugin_Mesher.cxx
index 24ffc26..011b239 100644
--- a/src/NETGENPlugin/NETGENPlugin_Mesher.cxx
+++ b/src/NETGENPlugin/NETGENPlugin_Mesher.cxx
@@ -72,15 +72,19 @@
 #ifndef OCCGEOMETRY
 #define OCCGEOMETRY
 #endif
+
 #include <occgeom.hpp>
 #include <meshing.hpp>
 //#include <ngexception.hpp>
 namespace netgen {
-#if NETGEN_VERSION >= NETGEN_VERSION_STRING(6,2)
+#if NETGEN_VERSION >= NETGEN_VERSION_STRING(6,2,2004)
+	typedef Refinement OCCRefinementSurfaces;
+	DLL_HEADER extern int OCCGenerateMesh(OCCGeometry&, shared_ptr<Mesh>&, MeshingParameters&);
+#elif NETGEN_VERSION >= NETGEN_VERSION_STRING(6,2,0)
 	DLL_HEADER extern int OCCGenerateMesh(OCCGeometry&, shared_ptr<Mesh>&, MeshingParameters&);
-#elif NETGEN_VERSION >= NETGEN_VERSION_STRING(6,0)
+#elif NETGEN_VERSION >= NETGEN_VERSION_STRING(6,0,0)
 	DLL_HEADER extern int OCCGenerateMesh(OCCGeometry&, shared_ptr<Mesh>&, MeshingParameters&, int, int);
-#elif NETGEN_VERSION >= NETGEN_VERSION_STRING(5,0)
+#elif NETGEN_VERSION >= NETGEN_VERSION_STRING(5,0,0)
 	DLL_HEADER extern int OCCGenerateMesh(OCCGeometry&, Mesh*&, MeshingParameters&, int, int);
 #else
 	DLL_HEADER extern int OCCGenerateMesh(OCCGeometry&, Mesh*&, int, int, char*);
@@ -168,7 +172,7 @@ NETGENPlugin_Mesher::~NETGENPlugin_Mesher()
   if ( _ptrToMe )
     *_ptrToMe = NULL;
   _ptrToMe = 0;
-#if NETGEN_VERSION < NETGEN_VERSION_STRING(6,0)
+#if NETGEN_VERSION < NETGEN_VERSION_STRING(6,0,0)
   _ngMesh = NULL;
 #endif
 }
@@ -2517,7 +2521,7 @@ bool NETGENPlugin_Mesher::Compute()
   // Generate the mesh
   // -------------------------
 
-#if NETGEN_VERSION < NETGEN_VERSION_STRING(6,0)
+#if NETGEN_VERSION < NETGEN_VERSION_STRING(6,0,0)
   _ngMesh = NULL;
 #endif
   NETGENPlugin_ngMeshInfo initState; // it remembers size of ng mesh equal to size of Smesh
@@ -2555,10 +2559,10 @@ bool NETGENPlugin_Mesher::Compute()
     occgeo.face_maxh = mparams.maxh;
 
     // Let netgen create _ngMesh and calculate element size on not meshed shapes
-#if NETGEN_VERSION < NETGEN_VERSION_STRING(5,0)
+#if NETGEN_VERSION < NETGEN_VERSION_STRING(5,0,0)
     char *optstr = 0;
 #endif
-#if NETGEN_VERSION < NETGEN_VERSION_STRING(6,2)
+#if NETGEN_VERSION < NETGEN_VERSION_STRING(6,2,0)
 	int startWith = netgen::MESHCONST_ANALYSE;
 	int endWith = netgen::MESHCONST_ANALYSE;
 #else
@@ -2567,9 +2571,9 @@ bool NETGENPlugin_Mesher::Compute()
 	try
 	{
 		OCC_CATCH_SIGNALS;
-#if NETGEN_VERSION >= NETGEN_VERSION_STRING(6,2)
+#if NETGEN_VERSION >= NETGEN_VERSION_STRING(6,2,0)
 		err = netgen::OCCGenerateMesh(occgeo, _ngMesh, mparams);
-#elif NETGEN_VERSION >= NETGEN_VERSION_STRING(5,0)
+#elif NETGEN_VERSION >= NETGEN_VERSION_STRING(5,0,0)
 		err = netgen::OCCGenerateMesh(occgeo, _ngMesh, mparams, startWith, endWith);
 #else
 		err = netgen::OCCGenerateMesh(occgeo, _ngMesh, startWith, endWith, optstr);
@@ -2586,7 +2590,7 @@ bool NETGENPlugin_Mesher::Compute()
     catch (netgen::NgException & ex)
     {
       comment << text(ex);
-#if NETGEN_VERSION >= NETGEN_VERSION_STRING(6,2)
+#if NETGEN_VERSION >= NETGEN_VERSION_STRING(6,2,0)
       if ( mparams.meshsizefilename.size() > 0 )
 #endif
         throw SMESH_ComputeError(COMPERR_BAD_PARMETERS, comment );
@@ -2594,7 +2598,7 @@ bool NETGENPlugin_Mesher::Compute()
     err = 0; //- MESHCONST_ANALYSE isn't so important step
     if ( !_ngMesh )
       return false;
-#if NETGEN_VERSION < NETGEN_VERSION_STRING(6,0)
+#if NETGEN_VERSION < NETGEN_VERSION_STRING(6,0,0)
 	ngLib.setMesh((Ng_Mesh*)_ngMesh);
 #else
 	ngLib.setMesh((Ng_Mesh*)_ngMesh.get());
@@ -2636,7 +2640,7 @@ bool NETGENPlugin_Mesher::Compute()
       intOccgeo.shape = occgeo.shape;
       intOccgeo.face_maxh.SetSize(intOccgeo.fmap.Extent());
       intOccgeo.face_maxh = netgen::mparam.maxh;
-#if NETGEN_VERSION < NETGEN_VERSION_STRING(6,0)
+#if NETGEN_VERSION < NETGEN_VERSION_STRING(6,0,0)
 	  netgen::Mesh *tmpNgMesh = NULL;
 #else
 	  std::shared_ptr<netgen::Mesh> tmpNgMesh;
@@ -2648,9 +2652,9 @@ bool NETGENPlugin_Mesher::Compute()
         //OCCSetLocalMeshSize(intOccgeo, *_ngMesh); it deletes _ngMesh->localH
 
         // let netgen create a temporary mesh
-#if NETGEN_VERSION >= NETGEN_VERSION_STRING(6,2)
+#if NETGEN_VERSION >= NETGEN_VERSION_STRING(6,2,0)
 		netgen::OCCGenerateMesh(intOccgeo, tmpNgMesh, mparams);
-#elif NETGEN_VERSION >= NETGEN_VERSION_STRING(5,0)
+#elif NETGEN_VERSION >= NETGEN_VERSION_STRING(5,0,0)
 		netgen::OCCGenerateMesh(intOccgeo, tmpNgMesh, mparams, startWith, endWith);
 #else
 		netgen::OCCGenerateMesh(intOccgeo, tmpNgMesh, startWith, endWith, optstr);
@@ -2659,22 +2663,22 @@ bool NETGENPlugin_Mesher::Compute()
           return false;
 
         // copy LocalH from the main to temporary mesh
-#if NETGEN_VERSION < NETGEN_VERSION_STRING(6,0)
+#if NETGEN_VERSION < NETGEN_VERSION_STRING(6,0,0)
 		initState.transferLocalH(_ngMesh, tmpNgMesh);
 #else
 		initState.transferLocalH(_ngMesh.get(), tmpNgMesh.get());
 #endif
 
         // compute mesh on internal edges
-#if NETGEN_VERSION < NETGEN_VERSION_STRING(6,2)
+#if NETGEN_VERSION < NETGEN_VERSION_STRING(6,2,0)
 		startWith = endWith = netgen::MESHCONST_MESHEDGES;
 #else
 		mparams.perfstepsstart = mparams.perfstepsend = netgen::MESHCONST_MESHEDGES;
 #endif
 
-#if NETGEN_VERSION >= NETGEN_VERSION_STRING(6,2)
+#if NETGEN_VERSION >= NETGEN_VERSION_STRING(6,2,0)
 		err = netgen::OCCGenerateMesh(intOccgeo, tmpNgMesh, mparams);
-#elif NETGEN_VERSION >= NETGEN_VERSION_STRING(5,0)
+#elif NETGEN_VERSION >= NETGEN_VERSION_STRING(5,0,0)
 		err = netgen::OCCGenerateMesh(intOccgeo, tmpNgMesh, mparams, startWith, endWith);
 #else
 		err = netgen::OCCGenerateMesh(intOccgeo, tmpNgMesh, startWith, endWith, optstr);
@@ -2686,7 +2690,7 @@ bool NETGENPlugin_Mesher::Compute()
         comment << text(ex);
         err = 1;
       }
-#if NETGEN_VERSION < NETGEN_VERSION_STRING(6,0)
+#if NETGEN_VERSION < NETGEN_VERSION_STRING(6,0,0)
 	  initState.restoreLocalH(tmpNgMesh);
 #else
 	  initState.restoreLocalH(tmpNgMesh.get());
@@ -2697,7 +2701,7 @@ bool NETGENPlugin_Mesher::Compute()
       FillSMesh( intOccgeo, *tmpNgMesh, initState, *_mesh, tmpNodeVec, comment );
       err = ( err || !comment.empty() );
 
-#if NETGEN_VERSION < NETGEN_VERSION_STRING(6,0)
+#if NETGEN_VERSION < NETGEN_VERSION_STRING(6,0,0)
 	  nglib::Ng_DeleteMesh((nglib::Ng_Mesh*)tmpNgMesh);
 #else
 	  tmpNgMesh.reset();
@@ -2710,7 +2714,7 @@ bool NETGENPlugin_Mesher::Compute()
       err = ! ( FillNgMesh(occgeo, *_ngMesh, nodeVec, meshedSM[ MeshDim_0D ]) &&
                 FillNgMesh(occgeo, *_ngMesh, nodeVec, meshedSM[ MeshDim_1D ], &quadHelper));
     }
-#if NETGEN_VERSION < NETGEN_VERSION_STRING(6, 0)
+#if NETGEN_VERSION < NETGEN_VERSION_STRING(6,0,0)
 		initState = NETGENPlugin_ngMeshInfo(_ngMesh);
 #else
 		initState = NETGENPlugin_ngMeshInfo(_ngMesh.get());
@@ -2719,7 +2723,7 @@ bool NETGENPlugin_Mesher::Compute()
     // Compute 1d mesh
     if (!err)
     {
-#if NETGEN_VERSION < NETGEN_VERSION_STRING(6,2)
+#if NETGEN_VERSION < NETGEN_VERSION_STRING(6,2,0)
 		startWith = endWith = netgen::MESHCONST_MESHEDGES;
 #else
 		mparams.perfstepsstart = mparams.perfstepsend = netgen::MESHCONST_MESHEDGES;
@@ -2727,9 +2731,9 @@ bool NETGENPlugin_Mesher::Compute()
       try
       {
         OCC_CATCH_SIGNALS;
-#if NETGEN_VERSION >= NETGEN_VERSION_STRING(6,2)
+#if NETGEN_VERSION >= NETGEN_VERSION_STRING(6,2,0)
 		err = netgen::OCCGenerateMesh(occgeo, _ngMesh, mparams);
-#elif NETGEN_VERSION >= NETGEN_VERSION_STRING(5,0)
+#elif NETGEN_VERSION >= NETGEN_VERSION_STRING(5,0,0)
 		err = netgen::OCCGenerateMesh(occgeo, _ngMesh, mparams, startWith, endWith);
 #else
 		err = netgen::OCCGenerateMesh(occgeo, _ngMesh, startWith, endWith, optstr);
@@ -2796,7 +2800,7 @@ bool NETGENPlugin_Mesher::Compute()
         FillSMesh( occgeo, *_ngMesh, initState, *_mesh, nodeVec, comment );
         // add segments to faces with internal vertices
         AddIntVerticesInFaces( occgeo, *_ngMesh, nodeVec, internals );
-#if NETGEN_VERSION < NETGEN_VERSION_STRING(6,0)
+#if NETGEN_VERSION < NETGEN_VERSION_STRING(6,0,0)
 		initState = NETGENPlugin_ngMeshInfo(_ngMesh);
 #else
 		initState = NETGENPlugin_ngMeshInfo(_ngMesh.get());
@@ -2809,7 +2813,7 @@ bool NETGENPlugin_Mesher::Compute()
       {
         if ( !internals.hasInternalVertexInFace() ) {
           FillSMesh( occgeo, *_ngMesh, initState, *_mesh, nodeVec, comment );
-#if NETGEN_VERSION < NETGEN_VERSION_STRING(6,0)
+#if NETGEN_VERSION < NETGEN_VERSION_STRING(6,0,0)
 		  initState = NETGENPlugin_ngMeshInfo(_ngMesh);
 #else
 		  initState = NETGENPlugin_ngMeshInfo(_ngMesh.get());
@@ -2841,7 +2845,7 @@ bool NETGENPlugin_Mesher::Compute()
 
           if ( !error ) error = SMESH_ComputeError::New();
         }
-#if NETGEN_VERSION < NETGEN_VERSION_STRING(6,0)
+#if NETGEN_VERSION < NETGEN_VERSION_STRING(6,0,0)
 		initState = NETGENPlugin_ngMeshInfo(_ngMesh);
 #else
 		initState = NETGENPlugin_ngMeshInfo(_ngMesh.get());
@@ -2849,7 +2853,7 @@ bool NETGENPlugin_Mesher::Compute()
       }
 
       // Let netgen compute 2D mesh
-#if NETGEN_VERSION < NETGEN_VERSION_STRING(6,2)
+#if NETGEN_VERSION < NETGEN_VERSION_STRING(6,2,0)
 	  startWith = netgen::MESHCONST_MESHSURFACE;
 	  endWith = _optimize ? netgen::MESHCONST_OPTSURFACE : netgen::MESHCONST_MESHSURFACE;
 #else
@@ -2859,9 +2863,9 @@ bool NETGENPlugin_Mesher::Compute()
       try
       {
         OCC_CATCH_SIGNALS;
-#if NETGEN_VERSION >= NETGEN_VERSION_STRING(6,2)
+#if NETGEN_VERSION >= NETGEN_VERSION_STRING(6,2,0)
 		err = netgen::OCCGenerateMesh(occgeo, _ngMesh, mparams);
-#elif NETGEN_VERSION >= NETGEN_VERSION_STRING(5,0)
+#elif NETGEN_VERSION >= NETGEN_VERSION_STRING(5,0,0)
 		err = netgen::OCCGenerateMesh(occgeo, _ngMesh, mparams, startWith, endWith);
 #else
 		err = netgen::OCCGenerateMesh(occgeo, _ngMesh, startWith, endWith, optstr);
@@ -2920,7 +2924,7 @@ bool NETGENPlugin_Mesher::Compute()
         }
       // fill _ngMesh with faces of sub-meshes
       err = ! ( FillNgMesh(occgeo, *_ngMesh, nodeVec, meshedSM[ MeshDim_2D ], &quadHelper));
-#if NETGEN_VERSION < NETGEN_VERSION_STRING(6,0)
+#if NETGEN_VERSION < NETGEN_VERSION_STRING(6,0,0)
 	  initState = NETGENPlugin_ngMeshInfo(_ngMesh);
 #else
 	  initState = NETGENPlugin_ngMeshInfo(_ngMesh.get());
@@ -2944,7 +2948,7 @@ bool NETGENPlugin_Mesher::Compute()
         }
         _ngMesh->SetGlobalH (mparams.maxh);
         mparams.grading = 0.4;
-#if NETGEN_VERSION < NETGEN_VERSION_STRING(5,0)
+#if NETGEN_VERSION < NETGEN_VERSION_STRING(5,0,0)
 		_ngMesh->CalcLocalH();
 #else
 		_ngMesh->CalcLocalH(mparams.grading);
@@ -2960,14 +2964,14 @@ bool NETGENPlugin_Mesher::Compute()
         AddIntVerticesInSolids( occgeo, *_ngMesh, nodeVec, internals );
         // duplicate mesh faces on internal faces
         FixIntFaces( occgeo, *_ngMesh, internals );
-#if NETGEN_VERSION < NETGEN_VERSION_STRING(6,0)
+#if NETGEN_VERSION < NETGEN_VERSION_STRING(6,0,0)
 		initState = NETGENPlugin_ngMeshInfo(_ngMesh);
 #else
 		initState = NETGENPlugin_ngMeshInfo(_ngMesh.get());
 #endif
       }
       // Let netgen compute 3D mesh
-#if NETGEN_VERSION < NETGEN_VERSION_STRING(6,2)
+#if NETGEN_VERSION < NETGEN_VERSION_STRING(6,2,0)
 	  startWith = endWith = netgen::MESHCONST_MESHVOLUME;
 #else
 	  mparams.perfstepsstart = mparams.perfstepsend = netgen::MESHCONST_MESHVOLUME;
@@ -2975,9 +2979,9 @@ bool NETGENPlugin_Mesher::Compute()
       try
       {
         OCC_CATCH_SIGNALS;
-#if NETGEN_VERSION >= NETGEN_VERSION_STRING(6,2)
+#if NETGEN_VERSION >= NETGEN_VERSION_STRING(6,2,0)
 		err = netgen::OCCGenerateMesh(occgeo, _ngMesh, mparams);
-#elif NETGEN_VERSION >= NETGEN_VERSION_STRING(5,0)
+#elif NETGEN_VERSION >= NETGEN_VERSION_STRING(5,0,0)
 		err = netgen::OCCGenerateMesh(occgeo, _ngMesh, mparams, startWith, endWith);
 #else
 		err = netgen::OCCGenerateMesh(occgeo, _ngMesh, startWith, endWith, optstr);
@@ -3005,7 +3009,7 @@ bool NETGENPlugin_Mesher::Compute()
       // Let netgen optimize 3D mesh
       if ( !err && _optimize )
       {
-#if NETGEN_VERSION < NETGEN_VERSION_STRING(6,2)
+#if NETGEN_VERSION < NETGEN_VERSION_STRING(6,2,0)
 		  startWith = endWith = netgen::MESHCONST_OPTVOLUME;
 #else
 		  mparams.perfstepsstart = mparams.perfstepsend = netgen::MESHCONST_OPTVOLUME;
@@ -3013,9 +3017,9 @@ bool NETGENPlugin_Mesher::Compute()
         try
         {
           OCC_CATCH_SIGNALS;
-#if NETGEN_VERSION >= NETGEN_VERSION_STRING(6,2)
+#if NETGEN_VERSION >= NETGEN_VERSION_STRING(6,2,0)
 		  err = netgen::OCCGenerateMesh(occgeo, _ngMesh, mparams);
-#elif NETGEN_VERSION >= NETGEN_VERSION_STRING(5,0)
+#elif NETGEN_VERSION >= NETGEN_VERSION_STRING(5,0,0)
 		  err = netgen::OCCGenerateMesh(occgeo, _ngMesh, mparams, startWith, endWith);
 #else
 		  err = netgen::OCCGenerateMesh(occgeo, _ngMesh, startWith, endWith, optstr);
@@ -3221,17 +3225,17 @@ bool NETGENPlugin_Mesher::Evaluate(MapShapeNbElems& aResMap)
 
   // let netgen create _ngMesh and calculate element size on not meshed shapes
   NETGENPlugin_NetgenLibWrapper ngLib;
-#if NETGEN_VERSION < NETGEN_VERSION_STRING(6,0)
+#if NETGEN_VERSION < NETGEN_VERSION_STRING(6,0,0)
   netgen::Mesh *ngMesh = NULL;
 #else
   std::shared_ptr<netgen::Mesh> ngMesh; // = std::make_shared<netgen::Mesh>();
 #endif
 
-#if NETGEN_VERSION < NETGEN_VERSION_STRING(5,0)
+#if NETGEN_VERSION < NETGEN_VERSION_STRING(5,0,0)
   char *optstr = 0;
 #endif
 
-#if NETGEN_VERSION < NETGEN_VERSION_STRING(6,2)
+#if NETGEN_VERSION < NETGEN_VERSION_STRING(6,2,0)
   int startWith = netgen::MESHCONST_ANALYSE;
   int endWith = netgen::MESHCONST_MESHEDGES;
 #else
@@ -3239,9 +3243,9 @@ bool NETGENPlugin_Mesher::Evaluate(MapShapeNbElems& aResMap)
   mparams.perfstepsend = netgen::MESHCONST_MESHEDGES;
 #endif
 
-#if NETGEN_VERSION >= NETGEN_VERSION_STRING(6,2)
+#if NETGEN_VERSION >= NETGEN_VERSION_STRING(6,2,0)
   int err = netgen::OCCGenerateMesh(occgeo, ngMesh, mparams);
-#elif NETGEN_VERSION >= NETGEN_VERSION_STRING(5,0)
+#elif NETGEN_VERSION >= NETGEN_VERSION_STRING(5,0,0)
   int err = netgen::OCCGenerateMesh(occgeo, ngMesh, mparams, startWith, endWith);
 #else
   int err = netgen::OCCGenerateMesh(occgeo, ngMesh, startWith, endWith, optstr);
@@ -3250,7 +3254,7 @@ bool NETGENPlugin_Mesher::Evaluate(MapShapeNbElems& aResMap)
   if(netgen::multithread.terminate)
     return false;
 
-#if NETGEN_VERSION < NETGEN_VERSION_STRING(6,0)
+#if NETGEN_VERSION < NETGEN_VERSION_STRING(6,0,0)
   ngLib.setMesh((Ng_Mesh*)ngMesh);
 #else
   ngLib.setMesh((Ng_Mesh*)ngMesh.get());
@@ -3678,7 +3682,7 @@ void NETGENPlugin_ngMeshInfo::transferLocalH( netgen::Mesh* fromMesh,
   if ( !fromMesh->LocalHFunctionGenerated() ) return;
   if ( !toMesh->LocalHFunctionGenerated() )
   
-  #if NETGEN_VERSION < NETGEN_VERSION_STRING(5,0)
+  #if NETGEN_VERSION < NETGEN_VERSION_STRING(5,0,0)
 	toMesh->CalcLocalH();
   #else
 	toMesh->CalcLocalH(netgen::mparam.grading);
@@ -4095,7 +4099,7 @@ NETGENPlugin_NetgenLibWrapper::NETGENPlugin_NetgenLibWrapper()
 #endif
   }
 
-#if NETGEN_VERSION < NETGEN_VERSION_STRING(6,0)
+#if NETGEN_VERSION < NETGEN_VERSION_STRING(6,0,0)
   _ngMesh = Ng_NewMesh();
 #else
   _ngMesh = std::make_shared<Ng_Mesh>();
@@ -4112,7 +4116,7 @@ NETGENPlugin_NetgenLibWrapper::~NETGENPlugin_NetgenLibWrapper()
 {
   --instanceCounter();
 
-#if NETGEN_VERSION < NETGEN_VERSION_STRING(6,0)
+#if NETGEN_VERSION < NETGEN_VERSION_STRING(6,0,0)
   Ng_DeleteMesh(_ngMesh);
 #else
   _ngMesh.reset();
@@ -4136,7 +4140,7 @@ NETGENPlugin_NetgenLibWrapper::~NETGENPlugin_NetgenLibWrapper()
 void NETGENPlugin_NetgenLibWrapper::setMesh( Ng_Mesh* mesh )
 {
   if ( _ngMesh )
-#if NETGEN_VERSION < NETGEN_VERSION_STRING(6,0)
+#if NETGEN_VERSION < NETGEN_VERSION_STRING(6,0,0)
 	Ng_DeleteMesh(_ngMesh);
 	_ngMesh = mesh;
 #else
diff --git a/src/NETGENPlugin/NETGENPlugin_NETGEN_2D_ONLY.cxx b/src/NETGENPlugin/NETGENPlugin_NETGEN_2D_ONLY.cxx
index d919911..56bc298 100644
--- a/src/NETGENPlugin/NETGENPlugin_NETGEN_2D_ONLY.cxx
+++ b/src/NETGENPlugin/NETGENPlugin_NETGEN_2D_ONLY.cxx
@@ -63,17 +63,30 @@ namespace nglib {
 #include <meshing.hpp>
 //#include <meshtype.hpp>
 namespace netgen {
-#if NETGEN_VERSION >= NETGEN_VERSION_STRING(6,2)
+#if NETGEN_VERSION >= NETGEN_VERSION_STRING(6,2,2004)
+    int OCCGenerateMesh(OCCGeometry& geo, shared_ptr<Mesh>& mesh, MeshingParameters& mparams)
+    {
+        int perfstepsend = mparams.perfstepsend;
+        if (perfstepsend == netgen::MESHCONST_OPTSURFACE) {
+            mparams.perfstepsend = netgen::MESHCONST_MESHSURFACE;
+        }
+        auto result = geo.GenerateMesh(mesh, mparams);
+        mparams.perfstepsend = perfstepsend;
+        return result;
+    }
+#elif NETGEN_VERSION >= NETGEN_VERSION_STRING(6,2,0)
 	DLL_HEADER extern int OCCGenerateMesh(OCCGeometry&, shared_ptr<Mesh>&, MeshingParameters&);
-#elif NETGEN_VERSION >= NETGEN_VERSION_STRING(6,0)
+#elif NETGEN_VERSION >= NETGEN_VERSION_STRING(6,0,0)
 	DLL_HEADER extern int OCCGenerateMesh(OCCGeometry&, shared_ptr<Mesh>&, MeshingParameters&, int, int);
-#elif NETGEN_VERSION >= NETGEN_VERSION_STRING(5,0)
+#elif NETGEN_VERSION >= NETGEN_VERSION_STRING(5,0,0)
 	DLL_HEADER extern int OCCGenerateMesh(OCCGeometry&, Mesh*&, MeshingParameters&, int, int);
 #else
 	DLL_HEADER extern int OCCGenerateMesh(OCCGeometry&, Mesh*&, int, int, char*);
 #endif
 	DLL_HEADER extern MeshingParameters mparam;
+#if NETGEN_VERSION <= NETGEN_VERSION_STRING(6,2,1808)
 	DLL_HEADER extern void OCCSetLocalMeshSize(OCCGeometry & geom, Mesh & mesh);
+#endif
 }
 
 using namespace std;
@@ -245,7 +258,7 @@ bool NETGENPlugin_NETGEN_2D_ONLY::Compute(SMESH_Mesh&         aMesh,
 
   netgen::Mesh   ngMeshNoLocSize;
 
-#if NETGEN_VERSION < NETGEN_VERSION_STRING(6,0)
+#if NETGEN_VERSION < NETGEN_VERSION_STRING(6,0,0)
   netgen::Mesh * ngMeshes[2] = { (netgen::Mesh*) ngLib._ngMesh,  &ngMeshNoLocSize };
 #else
   netgen::Mesh * ngMeshes[2] = { (netgen::Mesh*) ngLib._ngMesh.get(),  &ngMeshNoLocSize };
@@ -293,15 +306,27 @@ bool NETGENPlugin_NETGEN_2D_ONLY::Compute(SMESH_Mesh&         aMesh,
       netgen::mparam.minh = aMesher.GetDefaultMinSize( aShape, netgen::mparam.maxh );
     }
     // set local size depending on curvature and NOT closeness of EDGEs
+#if NETGEN_VERSION >= NETGEN_VERSION_STRING(6,2,2004)
+    netgen::mparam.closeedgefac = std::nullopt;
+#else
     netgen::occparam.resthcloseedgeenable = false;
+#endif
     //netgen::occparam.resthcloseedgefac = 1.0 + netgen::mparam.grading;
     occgeoComm.face_maxh = netgen::mparam.maxh;
+#if NETGEN_VERSION >= NETGEN_VERSION_STRING(6,2,2004)
+    occgeoComm.Analyse(*ngMeshes[0], netgen::mparam);
+#else
     netgen::OCCSetLocalMeshSize( occgeoComm, *ngMeshes[0] );
+#endif
     occgeoComm.emap.Clear();
     occgeoComm.vmap.Clear();
 
     // set local size according to size of existing segments
+#if NETGEN_VERSION >= NETGEN_VERSION_STRING(6,2,2004)
+    const double factor = netgen::mparam.closeedgefac.value();
+#else
     const double factor = netgen::occparam.resthcloseedgefac;
+#endif
     TopTools_IndexedMapOfShape edgeMap;
     TopExp::MapShapes( aMesh.GetShapeToMesh(), TopAbs_EDGE, edgeMap );
     for ( int iE = 1; iE <= edgeMap.Extent(); ++iE )
@@ -485,7 +510,7 @@ bool NETGENPlugin_NETGEN_2D_ONLY::Compute(SMESH_Mesh&         aMesh,
       // -------------------------
       // Generate surface mesh
       // -------------------------
-#if NETGEN_VERSION < NETGEN_VERSION_STRING(6,2)
+#if NETGEN_VERSION < NETGEN_VERSION_STRING(6,2,0)
 	  const int startWith = MESHCONST_MESHSURFACE;
 	  const int endWith = toOptimize ? MESHCONST_OPTSURFACE : MESHCONST_MESHSURFACE;
 #else
@@ -497,16 +522,16 @@ bool NETGENPlugin_NETGEN_2D_ONLY::Compute(SMESH_Mesh&         aMesh,
       try {
         OCC_CATCH_SIGNALS;
 
-#if NETGEN_VERSION >= NETGEN_VERSION_STRING(6,0)
+#if NETGEN_VERSION >= NETGEN_VERSION_STRING(6,0,0)
 
 		std::shared_ptr<netgen::Mesh> mesh_ptr(ngMesh, [](netgen::Mesh*) {});
 
-#if NETGEN_VERSION >= NETGEN_VERSION_STRING(6,2)
+#if NETGEN_VERSION >= NETGEN_VERSION_STRING(6,2,0)
 		err = netgen::OCCGenerateMesh(occgeom, mesh_ptr, netgen::mparam);
 #else
 		err = netgen::OCCGenerateMesh(occgeom, mesh_ptr, netgen::mparam, startWith, endWith);
 #endif
-#elif NETGEN_VERSION >= NETGEN_VERSION_STRING(5,0)
+#elif NETGEN_VERSION >= NETGEN_VERSION_STRING(5,0,0)
 		err = netgen::OCCGenerateMesh(occgeom, ngMesh, netgen::mparam, startWith, endWith);
 #else
 		char *optstr = 0;
diff --git a/src/NETGENPlugin/NETGENPlugin_NETGEN_3D.cxx b/src/NETGENPlugin/NETGENPlugin_NETGEN_3D.cxx
index b6b0ce5..e927acf 100644
--- a/src/NETGENPlugin/NETGENPlugin_NETGEN_3D.cxx
+++ b/src/NETGENPlugin/NETGENPlugin_NETGEN_3D.cxx
@@ -71,16 +71,16 @@
 #define OCCGEOMETRY
 #endif
 #include <occgeom.hpp>
-#include <ngexception.hpp>
+//#include <ngexception.hpp>
 namespace nglib {
 #include <nglib.h>
 }
 namespace netgen {
-#if NETGEN_VERSION >= NETGEN_VERSION_STRING(6,2)
+#if NETGEN_VERSION >= NETGEN_VERSION_STRING(6,2,0)
 	DLL_HEADER extern int OCCGenerateMesh(OCCGeometry&, shared_ptr<Mesh>&, MeshingParameters&);
-#elif NETGEN_VERSION >= NETGEN_VERSION_STRING(6,0)
+#elif NETGEN_VERSION >= NETGEN_VERSION_STRING(6,0,0)
 	DLL_HEADER extern int OCCGenerateMesh(OCCGeometry&, shared_ptr<Mesh>&, MeshingParameters&, int, int);
-#elif NETGEN_VERSION >= NETGEN_VERSION_STRING(5,0)
+#elif NETGEN_VERSION >= NETGEN_VERSION_STRING(5,0,0)
 	DLL_HEADER extern int OCCGenerateMesh(OCCGeometry&, Mesh*&, MeshingParameters&, int, int);
 #else
 	DLL_HEADER extern int OCCGenerateMesh(OCCGeometry&, Mesh*&, int, int, char*);
@@ -209,7 +209,7 @@ bool NETGENPlugin_NETGEN_3D::Compute(SMESH_Mesh&         aMesh,
   int Netgen_triangle[3];
 
   NETGENPlugin_NetgenLibWrapper ngLib;
-#if NETGEN_VERSION < NETGEN_VERSION_STRING(6,0)
+#if NETGEN_VERSION < NETGEN_VERSION_STRING(6,0,0)
   Ng_Mesh * Netgen_mesh = ngLib._ngMesh;
 #else
   Ng_Mesh * Netgen_mesh = ngLib._ngMesh.get();
@@ -433,11 +433,11 @@ bool NETGENPlugin_NETGEN_3D::compute(SMESH_Mesh&                     aMesh,
   netgen::Mesh* ngMesh = (netgen::Mesh*)Netgen_mesh;
   int Netgen_NbOfNodes = Ng_GetNP(Netgen_mesh);
 
-#if NETGEN_VERSION < NETGEN_VERSION_STRING(5,0)
+#if NETGEN_VERSION < NETGEN_VERSION_STRING(5,0,0)
   char *optstr = 0;
 #endif
 
-#if NETGEN_VERSION < NETGEN_VERSION_STRING(6,2)
+#if NETGEN_VERSION < NETGEN_VERSION_STRING(6,2,0)
   int startWith = netgen::MESHCONST_MESHVOLUME;
   int endWith = netgen::MESHCONST_OPTVOLUME;
 #else
@@ -471,7 +471,7 @@ bool NETGENPlugin_NETGEN_3D::compute(SMESH_Mesh&                     aMesh,
       }
     }
     if ( !_hypParameters->GetOptimize() )
-#if NETGEN_VERSION < NETGEN_VERSION_STRING(6,2)
+#if NETGEN_VERSION < NETGEN_VERSION_STRING(6,2,0)
 		endWith = netgen::MESHCONST_MESHVOLUME;
 #else
 		netgen::mparam.perfstepsend = netgen::MESHCONST_MESHVOLUME;
@@ -502,14 +502,14 @@ bool NETGENPlugin_NETGEN_3D::compute(SMESH_Mesh&                     aMesh,
   try
   {
     OCC_CATCH_SIGNALS;
-#if NETGEN_VERSION >= NETGEN_VERSION_STRING(6,0)
+#if NETGEN_VERSION >= NETGEN_VERSION_STRING(6,0,0)
 	std::shared_ptr<netgen::Mesh> mesh_ptr(ngMesh, [](netgen::Mesh*) {});
-#if NETGEN_VERSION >= NETGEN_VERSION_STRING(6,2)
+#if NETGEN_VERSION >= NETGEN_VERSION_STRING(6,2,0)
 	err = netgen::OCCGenerateMesh(occgeo, mesh_ptr, netgen::mparam);
 #else
 	err = netgen::OCCGenerateMesh(occgeo, mesh_ptr, netgen::mparam, startWith, endWith);
 #endif
-#elif NETGEN_VERSION >= NETGEN_VERSION_STRING(5,0)
+#elif NETGEN_VERSION >= NETGEN_VERSION_STRING(5,0,0)
 	ngMesh->CalcLocalH(netgen::mparam.grading);
 	err = netgen::OCCGenerateMesh(occgeo, ngMesh, netgen::mparam, startWith, endWith);
 #else
@@ -625,7 +625,7 @@ bool NETGENPlugin_NETGEN_3D::Compute(SMESH_Mesh&         aMesh,
   int Netgen_triangle[3];
 
   NETGENPlugin_NetgenLibWrapper ngLib;
-#if NETGEN_VERSION < NETGEN_VERSION_STRING(6,0)
+#if NETGEN_VERSION < NETGEN_VERSION_STRING(6,0,0)
   Ng_Mesh * Netgen_mesh = ngLib._ngMesh;
 #else
   Ng_Mesh * Netgen_mesh = ngLib._ngMesh.get();
